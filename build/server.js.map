{
  "version": 3,
  "file": "server.js",
  "sourceRoot": "../src/",
  "sources": [
    "server.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "dotty = require 'dotty'\r\n\r\nmodule.exports = (config) ->\r\n  (rs) ->\r\n    config = config or {}\r\n    expiresHours = config.expiresHours or 5\r\n    config.unauthorized = config.unauthorized or (res) ->\r\n      res.status 200\r\n      .end 'unauthorized'\r\n    setCorsHeaders = (req, res, next) ->\r\n      res.setHeader 'Access-Control-Allow-Origin', '*'\r\n      res.setHeader 'Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization'\r\n      res.setHeader 'Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE'\r\n      if req.method is 'OPTIONS'\r\n        res.end()\r\n      else\r\n        next()\r\n    rs.use '/api', setCorsHeaders\r\n    rs.use '/auth', setCorsHeaders\r\n    rs.use '/api/*', (req, res, next) ->\r\n      #all calls to api need an authorization token\r\n      if req.headers and req.headers.authorization\r\n        [scheme, token] = req.headers.authorization.split ' '\r\n        if scheme and token and /^Bearer$/i.test scheme\r\n          userId = rs.token.parseToken token\r\n          if userId\r\n            user = await rs.db.selectOne rs.config.userTable, _id: userId\r\n            if user\r\n              req.user = user\r\n              req.user.serverId = rs.serverId\r\n              req.db = rs.db.wrapUserFunctions req.user\r\n              return next()\r\n      config.unauthorized res\r\n    rs.use '/api/refresh-login', (req, res) ->\r\n      res.json req.user\r\n    rs.post '/auth/token', (req, res) ->\r\n      token = ''\r\n      refreshToken = ''\r\n      if req.headers and req.headers.authorization\r\n        [scheme, credentials] = req.headers.authorization.split ' '\r\n        if scheme and credentials\r\n          if /^Basic$/i.test scheme\r\n            [u64, p64] = credentials.split ':'\r\n            if u64 and p64\r\n              username = new Buffer u64, 'base64'\r\n              .toString 'utf8'            \r\n              password = new Buffer p64, 'base64'\r\n              .toString 'utf8'\r\n              opts = {}\r\n              dotty.put opts, rs.config.userNameField, username\r\n              user = await rs.db.selectOne rs.config.userTable, opts\r\n              if user\r\n                if rs.token.checkHash password, dotty.get user, rs.config.userPassField\r\n                  token = await rs.token.generateToken user._id, expiresHours\r\n                  refreshToken = await rs.token.generateToken 'REFRESH' + user._id, expiresHours\r\n      if token\r\n        res.json\r\n          accessToken: token\r\n          refreshToken: refreshToken\r\n          expires: new Date(new Date().setHours(new Date().getHours() + expiresHours / 2))\r\n      else\r\n        config.unauthorized res\r\n    rs.post '/auth/refresh', (req, res) ->\r\n      userId = rs.token.parseToken req.body.refreshToken\r\n      if /^REFRESH/.test userId\r\n        userId = userId.replace /^REFRESH/, ''\r\n        res.json\r\n          accessToken: await rs.token.generateToken userId, expiresHours\r\n          refreshToken: await rs.token.generateToken 'REFRESH' + userId, expiresHours\r\n          expires: new Date(new Date().setHours(new Date().getHours() + expiresHours / 2))\r\n      else\r\n        config.unauthorized res"
  ]
}